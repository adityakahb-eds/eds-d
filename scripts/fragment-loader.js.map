{"version":3,"sources":["scripts/fragment-loader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAC3D,OAAO,MAAM,MAAM,gBAAgB,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAE9C,MAAM,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AAChE,MAAM,WAAW,GAAG,KAAK,EAAE,YAAY,EAAE,EAAE;IACzC,MAAM,KAAK,CAAC,YAAY,CAAC,CAAC;AAC5B,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE;IACrD,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,QAAQ,CAAC;IAEb,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;QACvB,MAAM,OAAO,GAAG,IAAI,eAAe,CACjC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAC7D,CAAC;QACF,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,EAAG,MAAc,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;QACjF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,IAAI,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;QAC5F,QAAQ,GAAI,QAAgB,CAAC,SAAS,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;QACvB,QAAQ,CAAC,MAAM,GAAG,GAAG,SAAS,IAAI,QAAQ,UAAU,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC","file":"fragment-loader.js","sourcesContent":["import { getMetadata } from './aem';\nimport { loadFragment } from '../blocks/fragment/fragment';\nimport config from '../env/default';\nimport { createElement } from './__constants';\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\nconst induceDelay = async (milliseconds) => {\n  await delay(milliseconds);\n};\n\nconst getFragmentData = async (blockName, blockPath) => {\n  const tempEl = createElement('div');\n  let blockStr;\n\n  if (config.cookieUsage) {\n    const cookies = new URLSearchParams(\n      document.cookie.replaceAll('&', '%26').replaceAll('; ', '&'),\n    );\n    blockStr = cookies.get(blockName);\n  }\n\n  if (!blockStr) {\n    const meta = getMetadata(blockPath);\n    const path = meta ? new URL(meta, (window as any).location).pathname : blockPath;\n    const fragment = await loadFragment(`/${window.sessionStorage.getItem('sitelang')}${path}`);\n    blockStr = (fragment as any).innerHTML.replace(/(\\r\\n|\\n|\\r)/gm, '');\n  }\n\n  if (config.cookieUsage) {\n    document.cookie = `${blockName}=${blockStr}; Secure`;\n  }\n\n  tempEl.innerHTML = blockStr;\n  return tempEl;\n};\n\nexport { induceDelay, getFragmentData };\n"]}