{"version":3,"sources":["blocks/teaser/teaser.ts"],"names":[],"mappings":"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","file":"teaser.js","sourcesContent":["// import { $, addVendorFilesToDOM } from '../../scripts/__constants';\n\nimport { $, addClass, hasClass, wrapElements } from '../../scripts/__constants';\n\n/* eslint-disable */\n// START_MARKUP_INJECTION\nlet markup = ``;\n\n// END_MARKUP_INJECTION\n/* eslint-enable */\n\ninterface TeaserConfig {\n  bCls?: string[]; // Classes to add directly to the 'block' element\n  bpCls?: string[]; // Classes to add to the 'blockParent' element\n  imgOrdCls: string[]; // Classes for the image element, including order and base 'teaser-image'\n  txtOrdCls?: string[]; // Classes for the text wrapper, including order and base 'teaser-desc'\n  txtPadCls: string[]; // Padding classes for the text element itself\n  txtIdx: 0 | 1; // Index of the text element within blockParent.children (0 for first, 1 for second)\n  imgIdx: 0 | 1; // Index of the image element within blockParent.children (0 for first, 1 for second)\n  cWrap?: Function; // Optional function for complex wrapping scenarios\n}\n\nconst TEASER_CONFIGS: { [key: string]: TeaserConfig } = {\n  'teaser-image-left': {\n    imgOrdCls: ['order-0', 'teaser-image'],\n    txtOrdCls: ['order-1', 'teaser-desc', 'd-flex', 'justify-content-start'],\n    txtPadCls: ['px-5', 'py-5', 'px-md-5', 'py-md-9', 'px-xl-7'],\n    txtIdx: 1, // Text is the second child\n    imgIdx: 0, // Image is the first child\n  },\n  'teaser-image-block-left': {\n    bCls: ['container'],\n    bpCls: ['row'],\n    imgOrdCls: ['col-12', 'col-md-6', 'py-5', 'py-md-9', 'order-0', 'teaser-image'],\n    txtOrdCls: ['col-12', 'col-md-6', 'order-1', 'teaser-desc', 'd-flex', 'justify-content-start'],\n    txtPadCls: ['py-5', 'py-md-9'],\n    txtIdx: 1, // Text is the second child\n    imgIdx: 0, // Image is the first child\n  },\n  'teaser-image-right': {\n    imgOrdCls: ['order-0', 'order-md-1', 'teaser-image'],\n    txtOrdCls: ['order-1', 'order-md-0', 'teaser-desc', 'd-flex', 'justify-content-end'],\n    txtPadCls: ['px-5', 'py-5', 'px-md-5', 'py-md-9', 'px-xl-7'],\n    txtIdx: 0, // Text is the first child\n    imgIdx: 1, // Image is the second child\n  },\n  'teaser-image-block-right': {\n    bCls: ['container'],\n    bpCls: ['row'],\n    imgOrdCls: ['col-12', 'col-md-6', 'py-5', 'py-md-9', 'order-0', 'order-md-1', 'teaser-image'],\n    txtOrdCls: ['col-12', 'col-md-6', 'order-1', 'teaser-desc', 'd-flex', 'justify-content-start'],\n    txtPadCls: ['py-5', 'py-md-9'],\n    txtIdx: 0, // Text is the first child\n    imgIdx: 1, // Image is the second child\n  },\n  'teaser-image-background': {\n    imgOrdCls: ['order-0', 'teaser-image'],\n    txtPadCls: ['col-12', 'px-5', 'py-5', 'px-md-7', 'py-md-9'],\n    txtIdx: 1, // Text is the second child\n    imgIdx: 0, // Image is the first child\n    // Custom wrapping logic for this specific teaser type\n    cWrap: (blockTextEl: Element) => {\n      const row = wrapElements([blockTextEl], { className: 'row' });\n      const container = wrapElements([row], { className: 'container' });\n      wrapElements([container], { className: 'order-1 teaser-desc' });\n    },\n  },\n};\n\nconst init = (block: Element) => {\n  const blockParent = $(block, ':scope > div');\n  addClass(blockParent, 'd-flex flex-column flex-md-row');\n\n  for (const className in TEASER_CONFIGS) {\n    if (hasClass(block, className)) {\n      const config = TEASER_CONFIGS[className]; // Get the specific configuration for this block type.\n\n      if (config.bCls) {\n        addClass(block, config.bCls.join(' '));\n      }\n      if (config.bpCls) {\n        addClass(blockParent, config.bpCls.join(' '));\n      }\n\n      const blockImgEl = blockParent.children[config.imgIdx];\n      const blockTextEl = blockParent.children[config.txtIdx];\n\n      addClass(blockImgEl, config.imgOrdCls.join(' '));\n\n      addClass(blockTextEl, config.txtPadCls.join(' '));\n\n      config.cWrap\n        ? config.cWrap(blockTextEl)\n        : wrapElements([blockTextEl], { className: config.txtOrdCls.join(' ') });\n      break;\n    }\n  }\n};\n\nexport default async function decorate(block: Element) {\n  init(block);\n}\n"]}